FORMAT: 1A
# Albireo HTTP API
This is Albireo project http API document. it contains end user and admin API for Client.


# Group Home API

API for querying bangumi and episode in end user client. Including List bangumi and episode, get detail of a bangumi
and episode by specifying id.

## my_bangumi [/api/home/my_bangumi{?status}]

### List My Bangumi [GET]

list all bangumi which is favorite by current user

+ Parameters
    + `status` (number, optional) - the favorite status, can be one of the following value:  1 (WISH), 2 (WATCHED), 3 (WATCHING), 4 (PAUSE), 5 (ABANDONED) and 0 (all of above)
        + Default: `3`

+ Response 200 (application/json)

    + Attributes

        + `data` (array[BangumiUnwatched]) - a list of bangumi which contains unwatched count

## on_air [/api/home/on_air]

### List All [GET]

List all bangumi which is currently on air, on air means current date is between air_date and the last episode airdate plus one week.

+ Response 200 (application/json)

    + Attributes

        + `data` (array[BangumiFavorite]) - a list of bangumi which is on air

## List bangumi [/api/home/bangumi{?page,count,sort_field,sort_order,name,type}]

+ Parameters
    + `page` (number, optional) - the page number start from 1.
        + Default: `1`
    + `count` (number, optional) - count per page, by provide count = -1, client can obtain all data.
        + Default: `10`
    + `sort_field` (string, optional) - the field name used for sort by.
        + Default: `air_date`
    + `sort_order` (string, optional) - the sort order which can be only two value: desc and asc.
        + Default: `desc`
    + `name` (string, optional) - the search term for filtering result. this string will be matched by name_cn, name and summary.
    + `type` (number, optional) - type of bangumi ,can be -1 (all), 2 (anime), 6 (tv drama).
        + Default: `-1`

## List All [GET]

List all bangumi base on the given query criteria.

+ Response 200 (application/json)

    + Attributes

        + total: `256` (number, required) - the total number of bangumi under given query criteria
        + data (array[BangumiFavorite]) - a list of bangumi which is a sub set of all bangumi under given query criteria. if count is -1, this list will contains all bangumi

### Get Bangumi Detail [GET /api/home/bangumi/{id}]

+ Parameters
    + id (string, required) - bangumi id

+ Response 200 (application/json)

    + Attributes

        + data (BangumiExtended) - the bangumi object contains the episodes list.

## Get Episode detail [/api/home/episode/{id}]

Get the episode by specific id

+ Parameters
    + id (string, required) - the episode id

### Get Episode [GET]

+ Response 200 (application/json)

    + Attributes (EpisodeExtended)


# Group Favorite And Watch History API

A set of APIs which allow end user to view and modify favorite status of a bangumi and record watch history of an episode.

## Favorite Bangumi [/api/watch/favorite/bangumi/{bangumi_id}]

Change the favorite status of a bangumi

+ Parameters
    + `bangumi_id`: `46a469ee-5041-4f7c-8bf3-43ea6166a728` (string, required)

### Change Bangumi Favorite Status [POST]

+ Request  (application/json)

    + Attributes

        + status: `3` (number, required) - favorite status of the bangumi, can be one of the following value: 1 (WISH), 2 (WATCHED), 3 (WATCHING), 4 (PAUSE), 5 (ABANDONED)

+ Response 200 (application/json)

        {
            "message": "ok",
            "status": 0
        }

## Favorite Episode [/api/watch/favorite/episode/{episode_id}]

Change the favorite status of an episode, an episode favorite_status will affect my_bangumi API result if the bangumi of this episode is marked with 3 (WATCHING)
When episode is not favorite or favorite status is not 3 (WATCHING) or 2 (WATCHED) and episode status is 2 (DOWNLOADED), my_bangumi result will count this episode into unwatch_count.

+ Parameters
    + `episode_id`: `f0317eb2-d487-4e89-9e8d-9cccffd73e00` (string, required)

### Change Episode Favorite Status [POST]

+ Request  (application/json)

    + Attributes

        + status: `3` (number, required) - favorite status of the episode, can be one of the following value:  1 (WISH), 2 (WATCHED), 3 (WATCHING), 4 (PAUSE), 5 (ABANDONED)
        + bangumi_id: `f0317eb2-d487-4e89-9e8d-9cccffd73e00` - id of bangumi which the episode belongs to.

+ Response 200 (application/json)

        {
            "message": "ok",
            "status": 0
        }

## Episode Hisotry [/api/watch/history/{episode_id}]

Add/update the watch history and progress. When this operation is success the favorite status of an episode is also changed depending on the watch progress.
 If the watch progress is greater than a percentage which is controlled by client. a boolean field `is_finished` should be contained in request payload and set to true.
 When is_finished is true, the favorite status of current episode will be changed to 2 (WATCHED), otherwise, the favorite status will be set to 3 (WATCHING)

+ Parameters
    + `episode_id`: `f0317eb2-d487-4e89-9e8d-9cccffd73e00` (string, required)

### Update/Add Watch History And Progress [POST]

+ Request  (application/json)

    + Attributes

        + bangumi_id: `46a469ee-5041-4f7c-8bf3-43ea6166a728` (string, required) - id of bangumi which current episode belongs to.
        + last_watch_position: `3.0` (number, required) - a float value record the user watched position, it's the currentTime property of HTMLMediaElement, unit is second.
        + percentage: `0.5012` (number, required) - a float value which is the result of currentTime / duration.
        + is_finished: `false` (boolean, required) - This value indicates whether this episode is finished watching. Client should control the value on its own strategy. It's recommend to keep this value as true once the episode favorite status is changed to 2 (WATCHED).

+ Response 200 (application/json)

        {
            "message": "ok",
            "status": 0
        }

### Synchronize Episode History [POST /api/watch/history/synchronize]

Batch synchronize episode history to server. By comparing with last_watch_time between client and server.
a watch_progress record may be updated or untouched. if last_watch_time from client is later or equal than server,
server watch_progress record will be updated, otherwise the record from client will be dropped.

**This API always return success even the operation actually failed.**

Note that the last_watch_time must be UTC time.

+ Request  (application/json)

    + Attributes

        + records (array[WatchHistoryRecord]) - an array of watch history record to be synchronized.

+ Response 200 (application/json)

        {
            "message": "ok",
            "status": 0
        }

# Group Account API

A set of API related with login, register and user information

## Login [/api/user/login]

Login current user and create a session

### Login [POST]

+ Request  (application/json)

    + Attributes

        + name: `john_doe` (string, required) - user name
        + password: `adfbasdf` (string, required)
        + remmember: `true` (boolean, required) - whether to store the user session for a long period (365 days), if this value is false, only store session for one month.

+ Response 200 (application/json)

    + Headers

            set-cookie: session=c1234543-a419-4797-b3a1-b103f128b820.3oq6lYFBykUey9aPNm6D8RlXZ8Q; Expires=Sat, 10-Jun-2017 07:50:12 GMT; HttpOnly; Path=/

    + Body

            {"msg": "OK"}

+ Response 400 (application/json)

        {"message": "invalid parameter"}

+ Response 400 (application/json)

        {"message": "invalid name or password"}

## Logout [/api/user/logout]

Logout the user session

## Logout [POST]

+ Response 200 (application/json)

        {"msg": "OK"}

## Register User [/api/user/register]

register a new user using invite code, note that a newly registered user is not administrator

### Register [POST]

+ Request

    + Attributes

        + `name`: `john_doe` (string, required) -  user name, must be unique
        + `password` (string, required)
        + `password_repeat` (string, required) - must equal to password
        + `email` (string, required)
        + `invite_code` (string, required)

+ Response 201 (application/json)

        {"message": "ok"}

+ Response 400 (application/json)

        {"message": "invalid invite code"}

+ Response 400 (application/json)

        {"message": "duplicate name"}

+ Response 400 (application/json)

        {"message": "password not match"}

+ Response 400 (application/json)

        {"message": "invalid parameter"}

+ Response 400 (application/json)

        {"message": "invalid email"}

## GET User Info [/api/user/info]

get user information, this api can be used for check session validation

### Get Info [GET]

+ Response 200 (application/json)

        {
            "name": "john_doe",
            "level": 0,
            "email": "john_doe@example.com",
            "email_confirmed": True
        }

+ Response 401 (application/json)

        {
            "message": "unauthorized access"
        }

## Request Reset Password [/api/user/request-reset-pass]

used for users forgot their password, request a password reset

### Send Request [POST]

will send an email contains a link which includes a token to reset user password. email address must be a valid and confirmed email address

+ Request  (application/json)

    + Attributes

        + `email`: `john_doe@example.com` (string, required) - email address of user who want reset his/her password. must be valid and confirmed.

+ Response 200 (application/json)

        {"message": "ok"}

+ Response 400 (application/json)

        {"message": "invalid request"}

+ Response 400 (application/json)

        {"message": "email does not exist"}


## Update Password [/api/user/update-pass]

Update user password

### Update Password [POST]

This operation will send a notification email to user. and logout current user.

+ Request  (application/json)

    + Attributes

        + `password`: `asdf1234` (string, required) - current password
        + `new_password`: `123456abc` (string, required) - new password
        + `new_password_repeat`: `123456abc` (string, required)

+ Response 200

## User Email [/api/user/email]

Operations related with user email

### Update Email [POST /api/user/email]

A confirm email will be send to new email address, and a notification email will be sent to old email address.

+ Request  (application/json)

    + Attributes

        + `email`: `john_doe@example.com` (string, required)

+ Response 200 (application/json)

        {"message": "ok"}

### Resend Confirm Email [POST /api/user/email/resend]

Resend a confirm email to current email address.

+ Response 200 (application/json)

        {"message": "ok"}

### Confirm Email [POST /api/user/email/confirm]

Confirm email will set `email_confirmed` field to true.

+ Request  (application/json)

    + Attributes

        + `token` (string, required) - token from confirm email link.

+ Response 200 (application/json)

        {"message": "ok"}


## Reset Password [/api/user/reset-pass]

Reset a user password with new password and token. token can be acquired by using request-reset-pass API

### Reset Password [POST]

+ Request  (application/json)

    + Attributes

        + `new_pass` (string, required)
        + `new_pass_repeat` (string, required) - must equal to password
        + `token` (string, required)

+ Response 200 (application/json)

        {"message": "ok"}

+ Response 400 (application/json)

        {"message": "invalid token"}

+ Response 400 (application/json)

        {"message": "password not match"}

+ Response 400 (application/json)

        {"message": "invalid parameter"}

# Group Admin API

A set of API for managing bangumi and episode, NOTE: ALL these api require user.level >= 2

## Bangumi [/api/admin/bangumi{?page,count,order_by,sort,name,type}]

Bangumi resource, include CRUD operations

### List Bangumi [GET]

List bangumi by filter criteria. support return all bangumi by passing count = -1

+ Parameters
    + `page`: `1` (number, optional) - specify page of result set
        + Default: `1`
    + `count`: `10` (number, optional) - result count per page. if pass -1, return all bangumi
        + Default: `10`
    + `order_by`: `update_time` (string, optional) - sorting field, result set will sorted by this field.
        + Default: `update_time`
    + `sort`: `desc` (string, optional) - sort order, can be `desc` or `asc`
        + Default: `desc`
    + `name` (string, optional) - search term for name, name_cn, summary field contain specific string.
    + `type` (number, optional) - type of bangumi, can be -1 (all), 2 (anime), 6 (tv drama).
        + Default: `-1`

+ Response 200 (application/json)

    + Attributes

        + data (array[Bangumi]) - result list of current page filtered by given criteria. if count is -1, this list will contain all bangumi in database.
        + total: 100 (number) - total number of matched result

### Add Bangumi [POST]

Add a bangumi

+ Request  (application/json)

    + Attributes
        + `bgm_id`: `174138` (number) - the id of this bangumi in bgm.tv
        + `name`: `ロクでなし魔術講師と禁忌教典` (string) - the original name (usually the original language) of the bangumi
        + `name_cn`: `不正经的魔术讲师与禁忌教典` (string) - the chinese translated name of the bangumi, can be null.
        + `summary`: `厌恶魔术的魔术讲师所展开的叛逆英雄幻想剧！魔术与科学共同发展的世界——卢瓦佛斯。位于魔导大国·阿尔扎诺帝国南部的“阿尔扎诺帝国魔法学院”，是学习世界最先端魔术的最高学舍...` (string) - description for bangumi, can be null
        + `image`: `http://lain.bgm.tv/pic/cover/l/fb/9a/212500_858ip.jpg` (string) - the original image url from bgm.tv, this should not be used except the bangumi is not saved into database yet. A client should use cover property.
        + `eps_no_offset` (number) - A offset is used for adjust episode number matching issue. offset = <episode.episode_no> - <feed episode number>, can be null
        + `type`: `2` (number)
        + `air_date`: `2017-04-29` (string) - air date (aka on air starting date of bangumi)
        + `air_weekday`: `6` (number) - Which day of a week this bangumi is on air.
        + `eps`: `1` (number) - how many episodes the bangumi has
        + `episodes`
            + `bgm_eps_id`: `288990` (number)
            + `episode_no`: `1` (number)
            + `name`: `納涼床の女神` (string)
            + `name_cn`: `纳凉露台的女神` (string)
            + `duration`: `00:24:00` (string)
            + `airdate`: `2013-07-07` (string)

+ Response 200 (application/json)

    + Attributes
        + data
            + id: `46a469ee-5041-4f7c-8bf3-43ea6166a728` (string) - bangumi id of the newly added.


### Update Bangumi [PUT /api/admin/bangumi/{bangumi_id}]

Update a bangumi, this operation will not update all fields which client post. To learn which field is allowed to update,
see the source code.

Special Notice: when you try to update maintained_by, you should give a `user` object. if you want to reset to System, you should give a null value.

+ Parameters
    + `bangumi_id` (string, required)

+ Request  (application/json)

    + Attributes (Bangumi)

+ Response 200 (application/json)

        {"message": "ok"}

## Get Bangumi [GET /api/admin/bangumi/{bangumi_id}]

Get a bangumi detail with all episodes information

+ Parameters
    + bangumi_id (string, required)

+ Response 200 (application/json)

    + Attributes
        + data (BangumiExtended)

+ Response 404 (application/json)

        {"message": "NOT FOUND"}

### Delete Bangumi [DELETE /api/admin/bangumi/{bangumi_id}]

Delete a bangumi, this operation will add a delete_mark field to bangumi, after a given delay (configured in config file), a task will
delete this bangumi. administrator can undo a delete before that time by just remove the delete_mark.

+ Parameters
    + `bangumi_id` (string, required)

+ Response 200 (application/json)

    + Attributes
        + data
            + `delete_delay` 10 (number) - after how long the bangumi will be deleted, unit is minute.


## Query From Bangumi.tv [/api/admin/query{?name,type,offset,count}]

Provide A bridge to get bangumi information from bangumi.tv.

### Search Bangumi [GET]

Search bangumi from bangumi.tv by giving a specific search term.

+ Parameters
    + `name` (string, optional) - search term to filter bangumi from bangumi.tv, if this value is null, undefined, a 404 is returned
    + `type` (number, optional) - type of bangumi, 2 is anime, 6 is tv series.
        + Default: `2`
    + `offset` (number, optional) - item offset in the result list returned by bangumi.tv. usually this value is used for supporting pagination. offset = (page - 1) * count.
        + Default: `0`
    + `count` (number, optional) - number of items per page
        + Default: `10`

+ Response 200 (application/json)

    + Attributes
        + data (array[BangumiRaw])
        + total (number)

### Get Bangumi Detail [GET /api/admin/query/{bgm_id}]

Get the bangumi detail information by bangumi.tv bgm_id

+ Parameters
    + `bgm_id`: `193042` (number, required)

+ Response 200 (application/json)

    + Attributes (BangumiRawLarge)


## Episode [/api/admin/episode{?page,count,order_by,sort,status}]

Episode resource, include CRUD operations

### List Episode [GET]

List All Episode

+ Parameters
    + page: `1` (number, optional)
        + Default: `1`
    + count: `10` (number, optional)
        + Default: `10`
    + `order_by`: `bangumi_id` (string, optional)
        + Default: `bangumi_id`
    + sort: `desc` (string, optional) - sort order can be `desc` or `asc`
        + Default: `desc`
    + status: `1` (number, optional) - filter by episode status

+ Response 200 (application/json)

    + Attributes
        + data (array[Episode]) - a list of current page of the result filtered by search criteria
        + total: `100` (number) - total number of result filtered by search criteria


### Add Episode [POST]

Add an episode, this episode must related with a bangumi

+ Request  (application/json)

    + Attributes
        + `bangumi_id` (string, required)
        + `bgm_eps_id` (string, required)
        + `episode_no` (number, required)
        + `name` (string, required)
        + `name_cn` (string, optional)
        + `duration` (string, optional) - format is HH:mm:ss
        + `airdate` (string, optional) - format is YYYY-MM-DD

+ Response 200 (application/json)

    + Attributes
        + data
            + id (string) - the id of newly added episode

### Get Episode [GET /api/admin/episode/{episode_id}]

Get an episode detail

+ Parameters
    + `episode_id` (string, required)

+ Response 200 (application/json)

    + Attributes (Episode)

### Update Episode [PUT /api/admin/episode/{episode_id}]

Update an episode, only a few property will be updated, for more detail, read the source code.

+ Parameters
    + `episode_id` (string, required)

+ Request  (application/json)

    + Attributes (Episode)

+ Response 200 (application/json)

        {"msg": "ok"}

### Delete an episode [DELETE /api/admin/episode/{episode_id}]

Delete an episode. *In the previous version, this operation will only add an delete_mark property to episode as current time.*
*after a delay, task will run and delete this episode. user can undo the delete operation by remove the delete_mark before it is actually deleted.*

**In current version. This operation make effective immediately.**

+ Parameters
    + `episode_id` (string, required)

+ Response 200 (application/json)

        {"message": "ok"}

## Video File [/api/video-file{?episode_id}]

Video_file related operation, A video_file is an object which describe the video file property including url, resolution, duration, etc.

### List Video File [GET]

List all video files of specifial episode.

+ Parameters
    + `episode_id` (string, required)

+ Response 200 (application/json)

    + Attributes
        + data (array[VideoFile])

### Add Video File [POST]

Add a video_file to a special episode, this method is usually used for manually download video from a special magnet url

+ Request  (application/json)

    + Attributes
        + `bangumi_id`: `46a469ee-5041-4f7c-8bf3-43ea6166a728` (string, required)
        + `episode_id`: `f0317eb2-d487-4e89-9e8d-9cccffd73e00` (string, required)
        + `status`: `3` (number, required) - can be 1 (download pending), 2 (downloading), 3 (downloaded)
        + `file_path`: `[DMG][Roku de Nashi Majutsu Koushi to Akashic Records][01][720P]` (string, optional)
        + `file_name` (string, optional) - name of actual file, can be null
        + `download_url`: `magnet:?xt=urn:btih:614691f99c5073fa83d5d89582ff11024e929448&dn=%E4%B8%96%E7%95%8C%E5%A5%87%E5%A6%99%E7%89%A9%E8%AF%AD.2017%E5%B9%B4%E6%98%A5%E5%AD%A3%E7%89%B9%E5%88%AB%E7%AF%87.mp4` (string, optional)
        + `resolution_w`: `1024` (number, optional)
        + `resolution_h`: `576` (number, optional)
        + `duration`: `6399040` (number, optional)
        + `label` (string, optional)

+ Response 200 (application/json)

    + Attributes
        + data: `fe4150ee-4b11-46e3-b0ef-31aa6bce1095` (string) - id of newly added video_file

### Update Video File [PUT /api/admin/video-file/{id}]

Update a video_file, not all property will be updated.

+ Parameters
    + id (string, required)

+ Request  (application/json)

    + Attributes (VideoFile)

+ Response 200 (application/json)

        {"msg": "OK"}

### Delete A Video File [DELETE /api/admin/video-file/{id}]

Delete a video_file, this operation is an instant operation and could not revert. Note that currently
delete a video_file won't remove the torrent session from deluge associated with its torrent id. But will
remove the file associated with file_path of this video_file.

+ Parameters
    + id (string, required)

+ Response 200 (application/json)

        {"msg": "ok"}

# Group Feed API

This API is used for verify the search result for search term of some resource site. All of the API under this group are also required user.level >= 2

## dmhy [/api/feed/dmhy/{keywords}]

Get the feed result from dmhy. This API is unstable because it is a proxy API

+ Parameters
    + keywords (string, required) - the search term for dmhy

### Get Feed Result [GET]

+ Response 200 (application/json)

    + Attributes
        + data (array[FeedResult]) - the result of query, can be empty array if no result matched.
        + status: `0` (number)

## acg.rip [/api/feed/acg-rip/{keywords}]

Get the feed result from acg.rip. This API is unstable because it is a proxy API

+ Parameters
    + keywords (string, required) - the search term for dmhy

### Get Feed Result [GET]

+ Response 200 (application/json)

    + Attributes
        + data (array[FeedResult]) - the result of query, can be empty array if no result matched.
        + status: `0` (number)

## libyk [/api/feed/libyk-so{?q,t}]
Get the feed result from libyk.com, This API is unstable because it is a proxy API

+ Parameters
    + q (string, required) - the searchh term
    + t (string, required) - the source for search, can be `yyets`, `dmhy`, `tokyo`

### GET Feed Result [GET]

+ Response 200 (application/json)

    + Attributes
        + data (array[FeedResult]) - the result of query, can be empty array if no result matched.
        + status: `0` (number)

## Bangumi.moe Proxy [/api/feed/bangumi-moe]

Proxy for bangumi.moe API which method is POST

### Proxy [POST]

Return response of this method can be any

+ Request  (application/json)

    + Attributes
        + url (string, required) - target bangumi.moe url to reach
        + payload (object, required) - bangumi.moe request payload

+ Response 200 (application/json)

    + Attributes (object)

## Bangumi.moe Torrent Search [/api/feed/bangumi-moe/torrent/search]

Search torrents using tag_ids, for more detail, see https://github.com/BangumiMoe/rin-pr-apidoc/blob/master/DOC/api/torrent.md

### Search [POST]

+ Request  (application/json)

    + Attributes
        + tag_id (array[string]) - tag id list
        + p (number, optional) - page

+ Response 200 (application)

    + Attributes
        + count (number)
        + page_count (number),
        + torrents (array[object]) - see rin-pr document

# Group Task

This is a set of API that related to tasks. All APIs in this group require user.level >= 2

## Pending Delete Bangumi [/api/task/bangumi]

Operations related with pending delete bangumi.

### List Pending Delete Bangumi [GET]

+ Response 200 (application/json)

    + Attributes
        + data (array[BangumiPendingDelete]) - pending delete bangumi list
        + `delete_delay` (number) - the configured delete delay for bangumi

## Pending Delete Episode [/api/task/episode]

Operations related with pending delete episode

### List Pending Delete Episode [GET]

+ Response 200 (application/json)

    + Attributes
        + data (array[EpisodePendingDelete]) - pending delete episode list
        + `delete_delay` (number) - the configured delete delay for episode

## Task [/api/task/task]

Operations related with task

### List Tasks [GET]

+ Response 200 (application/json)

    + Attributes
        + data (array[Task]) - a list of tasks

## Restore Bangumi [/api/task/restore/bangumi/{id}]

Restore a pending delete bangumi, only available before bangumi is actually deleted.

+ Parameters
    + `id` (string, required) - bangumi id

### Restore [POST]

+ Response 200 (application/json)

        {"msg": "ok"}

## Restore Episode [/api/task/restore/episode/{episode_id}]

Restore a pending delete episode, only available before episode is actually deleted.

+ Parameters
    + `episode_id` (string, required) - episode id

### Restore [POST]

+ Response 200 (application/json)

        {"msg": "ok"}

# Group User Management

A set of API which used to management user and invite code. All APIs in this group require user.level >= 2.

## User [/api/user-manage{?name,count,offset,minlevel}]

User related operations

### List All User [GET]

+ Parameters
    + `name` (string, optional) - user name to search.
    + `count`: `10` (number, optional) - number of items per page.
        + Default: `10`
    + `offset`: `0` (number, optional) - start position off current page.
        + Default: `0`
    + `minlevel`: `0` (number, optional) - the minimun level of user.
        + Default: `0`

+ Response 200 (application)

    + Attributes
        + `data` (array[User]) - list of user in current page
        + `total` (number) - total number under current search term.

### Promote A User [POST /api/user-manage/promote]

+ Request  (application/json)

    + Attributes
        + `id`: `f0317eb3-d487-4e89-9e8d-9cf0ffd73e00` (string, required) - user id
        + `to_level`: `2` (number, required) - level to be promoted.

+ Response 200 (application/json)

        {"msg": "OK"}


## Invite Code [/api/user-manage/invite{?num}]

Invite code related operations

### Create A New Invite Code [POST]

+ Parameters
    + `num`: `1` (number, optional) - how many invite codes to be generated.
        + Default: `1`

+ Response 200 (application/json)

    + Attributes
        + `data` (array[string]) - invite code list which are newly generated.

### List All Unused Invite Code [GET /api/user-manage/invite/unused]

List all unused invite code

+ Response 200 (application/json)

    + Attributes
        + `data` (array[string]) - invite code list


# Group Announce Management

A set of API which is used to management announce.

## List All Announce [/api/announce{?offset,count}]

List all announce including those already out of date.

### Get [GET]

List all by page

+ Parameters
    + `offset`: `0` (number, optional) - offset of pagination.
        + Default: `0`
    + `count`: `10` (number, optional) - item number per page.
        + Default: `10`

+ Response 200 (application/json)

    + Attributes
        + `data` (array[Announce]) - announce list.
        + `total` (number) - total count.

### Add [POST]

Add an announce

+ Request  (application/json)

    + Attributes (Announce)

+ Response 200 (application/json)

        {'message': 'ok'}

### Update [PUT /api/announce/{announce_id}]

Update an announce

+ Parameters
    + `announce_id`: `fe4150ee-4b11-46e3-b0ef-31aa6bce1095` (string) - id of announce

+ Request  (application/json)

    + Attributes (Announce)

+ Response 200 (application/json)

        {'message': 'ok'}

### Delete [DELETE /api/announce/{announce_id}]

Delete an announce

+ Parameters
    + `announce_id`: `fe4150ee-4b11-46e3-b0ef-31aa6bce1095` (string) - id of announce

+ Response 200 (application/json)

        {'message': 'ok'}


# Group Web Hook Management

A set of API management web hook registeration and lifecyle.

## Web Hooks [/api/web-hook/]

List all web hook registered. THIS API doesn't require an Admin permission.

Notice: the tailing slash is required for this API.

### GET ALL [GET]

List all

+ Response 200 (application/json)

    + Attributes
        + `data` (WebHook) - list of web hook
        + `total` (number) - total count

### Register [POST /api/web-hook/register]

Register a web hook. Make sure your web hook is ready to respond the KEEP_ALIVE event and handle the event correctly. Once the web hook is registered a KEEP_ALIVE
event will be emitted. If your web hook does not respond correctly. Its status will always be INITIAL and will not emit any other event.

+ Request  (application/json)

    + Attributes
        + `name`: `Awesome Web Hook` (string) - name of web hook, must be unique.
        + `description` (string) - a plaint text.
        + `url`: `http://localhost:9800/` (string) - the url of web hook ,must be http/https scheme.
        + `shared_secret`: `abc` (string) - a shared_secret which is used to make signature in both event and API.

+ Response 200 (application/json)

    + Attributes
        + `data`: `d92db89d-54f2-43aa-82d9-205aad99b96e` (string) - id of web hook

## Update Web Hook [PUT /api/web-hook/{web_hook_id}]

update some property of a certain web hook

+ Parameters
    + `web_hook_id`: `d92db89d-54f2-43aa-82d9-205aad99b96e` (string) - id of a web hook

+ Request  (application/json)

    + Attributes (WebHook)

+ Response 200 (application/json)

        {'message': 'ok'}

## DELETE Web HooK [DELETE /api/web-hook/{web_hook_id}]

Delete a certain web hook and delete all web hook token associated with this web hook.

+ Parameters
    + `web_hook_id`: `d92db89d-54f2-43aa-82d9-205aad99b96e` (string) - id of a web hook

+ Response 200 (application/json)

        {'message': 'ok'}

# Group Web Hook Life Cycle

API for the web hook to invoke by itself. affect the status of the web hook

## Revive [POST /api/web-hook/revive]

Revive a HAS ERROR or DEAD status web hook. Besides, can be also used to initialize a web hook with an empty token_id_list.

About the signature: token_id_list is a comma-separated string of token ids.

+ Request  (application/json)

    + Attributes
        + `web_hook_id`: `d92db89d-54f2-43aa-82d9-205aad99b96e` (string, required) - the id of web hook
        + `token_id_list` (array[string], optional) - a token id list which indicates which user's favorite info is need for the web hook.
        + `signature` (string) - a signature generated by web hook which is a hash using hmac with sha256 combine shared_secret and message, message format is `web_hook_id=<web_hook_id>&token_id_list=<token id list>`

+ Response 200 (application/json)

    + Attributes
        + `data` (array[TokenFavoriteList]) - a list of favorite object with user_id replaced by token_id

# Group Web Hook Token For User

## Web Hook Tokens [/api/web-hook/token{?web_hook_id,token_id}]

token related APIs

### GET ALL [GET]

List web hook by user_id, actually this API will return all web_hook which user has a token associated with.

+ Response 200 (application/json)

    + Attributes
        + `data` (array[WebHook])
        + `total` (number)


### Add Web Hook Token [POST]

Add a web hook token and associate with current user.

+ Parameters
    + `web_hook_id`: `d92db89d-54f2-43aa-82d9-205aad99b96e` (string) - id of the web hook to be added.
    + `token_id`: `` (string) - the token id

+ Response 200 (application/json)

        {'message': 'ok'}

### Delete Web Hook Token [DELETE]

delete a web hook token

+ Parameters
    + `web_hook_id`: `d92db89d-54f2-43aa-82d9-205aad99b96e` (string) - id of the web hook to be added.

+ Response 200 (application/json)

        {'message': 'ok'}


# Data Structures

## BangumiRaw
- `bgm_id`: `193042` (number)
- `rating` (Rating)
- `name`: `有頂天家族2` (string)
- `air_date`: `2017-04-09` (string)
- `image`: `http://lain.bgm.tv/pic/cover/l/0d/e4/193042_So0pa.jpg` (string)
- `name_cn`: `有顶天家族2` (string)
- `eps`: `12` (number)
- `rank`: `428` (number)
- `summary`: `人居市街内，狸猫匍地行，天狗翱长空。居于京都下鸭神社糺之森的下鸭一家。...。` (string)
- `air_weekday`: `7` (number)
- `id`: `587b0a9b-c2ba-4f01-b553-6d14ed60f311` (string, optional) - this is the bangumi id in database, if this id is found, client should let user know that this bangumi already exists in database.

## Rating
- `count` (RatingCount)
- `total`: `157` (number)
- `score`: `7.9` (number)

## RatingCount
- `10`: `9` (number)
- `1`: `0` (number)
- `3`: `0` (number)
- `2`: `0` (number)
- `5`: `1` (number)
- `4`: `0` (number)
- `7`: `35` (number)
- `6`: `8` (number)
- `9`: `15` (number)
- `8`: `89` (number)

## Image
- `url`: `/pic/587b0a9b-c2ba-4f01-b553-6d14ed60f311/cover.jpg` (string) - the url for this image.
- `dominant_color`: `#ffcfc3` (string) - the dominant color of this image.
- `width`: 600 (number) - the width of the image in pixel.
- `height`: 400 (number) - the height of the image in pixel.

## BangumiRawLarge
- `id`: `68035` (number)
- `url`: `http://bgm.tv/subject/68035` (string)
- `type`: `2` (number)
- `name`: `有頂天家族` (string)
- `name_cn`: `有顶天家族` (string)
- `summary`: `作品讲述原狸猫一族名门下鸭家的家主被人类下火锅后，不中用的下鸭四兄弟与其老母撑起家道中落的下鸭家的故事。老大矢一郎个性认真，但一到紧要关头就手足无措；老二变身为青蛙，不肯出井底；老三最爱看好戏，喜欢恶作剧；老幺胆子小，变身总是忘了藏尾巴。不靠谱的四兄弟………困境重重、霉运不断，四兄弟有机会保护母亲，重振家威吗？` (string)
- `eps` (array[EpisodeRaw])
- `air_date`: `2013-07-07` (string)
- `air_weekday`: `7` (number)
- `rating` (Rating)
- `rank`: `247` (number)
- `images` (BgmImage) - you should use the `large` property of image.
- `collection` (object) - this is a trivial object for Albireo. for more detail, visit: https://github.com/jabbany/dhufufu/blob/master/bangumi/api.txt
- `crt` (array[object]) - this is a trivial object for Albireo. for more detail, visit: https://github.com/jabbany/dhufufu/blob/master/bangumi/api.txt
- `staff` (array[object]) - this is a trivial object for Albireo. for more detail, visit: https://github.com/jabbany/dhufufu/blob/master/bangumi/api.txt
- `topic` (array[object]) - this is a trivial object for Albireo. for more detail, visit: https://github.com/jabbany/dhufufu/blob/master/bangumi/api.txt
- `blog` (array[object]) - this is a trivial object for Albireo. for more detail, visit: https://github.com/jabbany/dhufufu/blob/master/bangumi/api.txt

## EpisodeRaw
- `id`: `288990` (number)
- `url`: `http://bgm.tv/ep/288990` (string)
- `type`: `0` (number)
- `sort`: `1` (number)
- `name`: `納涼床の女神` (string)
- `name_cn`: `纳凉露台的女神` (string)
- `duration`: `00:24:00` (string)
- `airdate`: `2013-07-07` (string)
- `comment`: `99` (number)
- `desc`: `脚本：菅正太郎 / 絵コンテ：吉原正行 / 演出：菅沼芙実彦 / 作画監督：川面恒介

## BgmImage
- `large`: `http://lain.bgm.tv/pic/crt/l/a6/73/5807_prsn_Igcj1.jpg` (string)
- `medium`: `http://lain.bgm.tv/pic/crt/m/a6/73/5807_prsn_Igcj1.jpg` (string)
- `small`: `http://lain.bgm.tv/pic/crt/s/a6/73/5807_prsn_Igcj1.jpg` (string)
- `grid`: `http://lain.bgm.tv/pic/crt/g/a6/73/5807_prsn_Igcj1.jpg` (string)

## Bangumi
- `id`: `46a469ee-5041-4f7c-8bf3-43ea6166a728` (string)
- `bgm_id`: `174138` (number) - the id of this bangumi in bgm.tv
- `name`: `ロクでなし魔術講師と禁忌教典` (string) - the original name (usually the original language) of the bangumi
- `name_cn`: `不正经的魔术讲师与禁忌教典` (string) - the chinese translated name of the bangumi, can be null.
- `summary`: `厌恶魔术的魔术讲师所展开的叛逆英雄幻想剧！魔术与科学共同发展的世界——卢瓦佛斯。位于魔导大国·阿尔扎诺帝国南部的“阿尔扎诺帝国魔法学院”，是学习世界最先端魔术的最高学舍...` (string) - description for bangumi, can be null
- `image`: `http://lain.bgm.tv/pic/cover/l/fb/9a/212500_858ip.jpg` (string) - the original image url from bgm.tv, this should not be used except the bangumi is not saved into database yet. A client should use cover property.
- `cover`: `https://yourdomain.com/pic/46a469ee-5041-4f7c-8bf3-43ea6166a728/cover.jpg` (string) - the image url of bangumi, which is stored locally. **Note that this field is DEPRECATED**
- `cover_color`: `#ffcfc3` (string, optional) - the dominant color of bangumi cover image. **Note that this field is DEPRECATED**
- `cover_image` (Image, optional) - cover image object.
- `create_time`: `1493655186672.0` (number)
- `update_time`: `1493655186672.0` (number)
- `eps_no_offset` (number) - A offset is used for adjust episode number matching issue. offset = <episode.episode_no> - <feed episode number>, can be null
- `bangumi_moe`: `[{"_id":"58df79c779c3a0541f4b61bb","name":"ロクでなし魔術講師と禁忌教典","type":"bangumi"}]` (string) - the search term for bangumi.moe, this string is in fact a json string. For detail of this format, see https://github.com/BangumiMoe/rin-pr-apidoc/blob/master/DOC/api/tag.md
- `libyk_so`: `{q: "不正经的魔术讲师与禁忌教典 简体 MP4", t: "dmhy"}` (string) - search term for libyk.com. The string is in fact a json string
- `dmhy`: `不正经的魔术讲师与禁忌教典 简体 MP4` (string) - search term for dmhy
- `type`: `2` (number)
- `status`: `1` (number) - status of a bangumi, can be 0 (pending), 1 (on air), 2 (finished)
- `air_date`: `2017-04-29` (string) - air date (aka on air starting date of bangumi)
- `air_weekday`: `6` (number) - Which day of a week this bangumi is on air.
- `delete_mark`: `1493655186672.0` (number) - used for mark the delete action timestamp, can be null
- `acg_rip`: `世界奇妙物语 720 MP4`, (string) - the search term for acg.rip
- `rss` (string) - DEPRECATED, will be removed in the future
- `eps_regex` (string) - DEPRECATED, will be removed in the future
- `eps`: `1` (number) - how many episodes the bangumi has
- `created_by_uid`: `b50263f6-c1a0-432c-af6b-19f8cb9e58d2` (string) - id of user who create this item.
- `maintained_by_uid`: `b50263f6-c1a0-432c-af6b-19f8cb9e58d2` (string) - id of user who maintains this item, can be modified.

## BangumiExtended (Bangumi)
- `episodes` (array[EpisodeWithWatchProgress]) - episode list of the bangumi
- `created_by` (User, optional) - user object, who is the creator of the bangumi item.
- `maintained_by` (User, optional) - user object, who is the maintainer of the bangumi item.

## BangumiFavorite (Bangumi)
- `favorite_status`: `3` (number, optional) - current favorite status of the bangumi, this field can be one of the following value: 1 (WISH), 2 (WATCHED), 3 (WATCHING), 4 (PAUSE), 5 (ABANDONED)

## BangumiUnwatched (BangumiFavorite)
- `unwatched_count`: `10` (number, required) - how many episodes which is downloaded but not been watched by current user.

## BangumiPendingDelete (Bangumi)
- `delete_eta`: `5` (number, required) - estimated time left to delete this bangumi.

## Episode
- `id`: `f0317eb2-d487-4e89-9e8d-9cccffd73e00` (string)
- `bangumi_id`: `46a469ee-5041-4f7c-8bf3-43ea6166a728` (string) - Id of bangumi that is the episode belong to.
- `bgm_eps_id`: `711764` (number) - id of this episode in bgm.tv
- `name`: `01` (string) - the original name (usually the original language) of the episode
- `name_cn`: `没干劲的不正经老师` (string) - the chinese translated name of the episode, can be null
- `thumbnail`: `https://yourdomain.com/pic/46a469ee-5041-4f7c-8bf3-43ea6166a728/thumbnails/1.png` (string, optional) **Note that this field is DEPRECATED**
- `status`: `2` (number) - the status of episode, can be: 0 (not downloaded), 1 (downloading), 2 (downloaded)
- `episode_no`: `1` (number) - the number of the episode
- `create_time`: `1493655186675.0` (number)
- `update_time`: `1493658358003.0` (number)
- `airdate`: `2017-04-29` (string)
- `delete_mark` (number) - can be null
- `duration` (string)
- `thumbnail_color`: `#f2c3a0` (string, optional) - dominant color of thumbnail image. May be null if thumbnail is not existed **Note that this field is DEPRECATED**
- `thumbnail_image` (Image, optional) - image object of thumbnail image. May be null if thumbnail is not existed.

## EpisodeWithWatchProgress (Episode)
- `watch_progress` (WatchProgress) - the watch progress information of current episode, can be undefined.

## EpisodeExtended (Episode)
- `bangumi` (Bangumi) - the bangumi which this episode belongs to.
- `video_files` (array[VideoFile]) - the actual video files associated with this episode.
- `watch_progress` (WatchProgress) - the watch progress information of current episode, can be undefined.

## EpisodePendingDelete (Episode)
- `delete_eta`: `1` (number, required) - estimated time left to delete this episode.

## VideoFile
- `id`: `fe4150ee-4b11-46e3-b0ef-31aa6bce1095` (string)
- `status`: `3` (number) - can be 1 (download pending), 2 (downloading), 3 (downloaded)
- `torrent_id`: `614691f99c5073fa83d5d89582ff11024e929448` (string)
- `url`: `https://yourdomain/video/02981eec-c817-47e5-baed-56d466afbb20/[DMG][Roku de Nashi Majutsu Koushi to Akashic Records][01][720P][GB].mp4` (string) -
- `file_path`: `[DMG][Roku de Nashi Majutsu Koushi to Akashic Records][01][720P]` (string)
- `file_name` (string) - name of actual file, can be null
- `resolution_w`: `1024` (number)
- `download_url`: `magnet:?xt=urn:btih:614691f99c5073fa83d5d89582ff11024e929448&dn=%E4%B8%96%E7%95%8C%E5%A5%87%E5%A6%99%E7%89%A9%E8%AF%AD.2017%E5%B9%B4%E6%98%A5%E5%AD%A3%E7%89%B9%E5%88%AB%E7%AF%87.mp4` (string)
- `episode_id`: `f0317eb2-d487-4e89-9e8d-9cccffd73e00` (string)
- `resolution_h`: `576` (number)
- `bangumi_id`: `46a469ee-5041-4f7c-8bf3-43ea6166a728` (string)
- `duration`: `6399040` (number)
- `label` (string)

## FeedResult
- `title` (string) - the feed title of item
- `episode_no` (number) - the episode number parsed from title, using regular expression, if no episode no is matched, it is -1.

## Task
- `id` (string)
- `type` (number) - type of task, can be 1 (TYPE_BANGUMI_DELETE), 2 (TYPE_EPISODE_DELETE)
- `content` (string) - task content, usually a serialized json string. the structures for task can vary for different tasks.
- `status` (number) - status of task, can be 1 (STATUS_IN_PROGRESS), 2 (STATUS_COMPLETE)

## User
- `id` (string)
- `name` (string)
- `level` (number) - level of user, default is 0, admin is 2, superuser is 3
- `email` (string) - email of user, this field is masked to hide the whole string of email
- `email_confirmed` - whether user has confirmed its email

## WatchProgress

- `user_id`: `497fc98a-9a96-4d6a-912f-6563629245cd` (string) - identify which user this watch progress belongs to.
- `last_watch_position`: `1481.177687` (number) - last watched video progress by seconds
- `bangumi_id`: `02981eec-c817-47e5-baed-56d466afbb20` (string)
- `watch_status`: `2` (number) - can be 1 (WISH), 2 (WATCHED), 3 (WATCHING), 4 (PAUSE), 5 (ABANDONED)
- `episode_id`: `324bbe92-df97-4dee-b0ed-1d7cca97599e` (string)
- `percentage`: `1.0` (number) - watched percentage of video duration. from 0 ~ 1
- `last_watch_time`: `1497574966172.0` (number) - a timestamp of last record time
- `id`: `808a7d09-629f-41a3-a1bc-0924a95c5cc6` (string)

## WatchHistoryRecord
- `bangumi_id`: `02981eec-c817-47e5-baed-56d466afbb20` (string)
- `episode_id`: `324bbe92-df97-4dee-b0ed-1d7cca97599e` (string)
- `last_watch_position`: `1481.177687` (number) - last watched video progress by seconds
- `last_watch_time`: `1497574966172.0` (number) - a timestamp of last record time
- `percentage`: `1.0` (number) - watched percentage of video duration. from 0 ~ 1
- `is_finished` (boolean) - whether this watch history is finished watching. when this field is true, watch_status of watch_progress will be 2 (WATCHED).

## Announce
- `id` : `02981eec-c817-47e5-baed-56d466afbb20` (string)
- `url`: `http://somesite.com/somepath` (string) - the target url of announcement content.
- `image_url`: `http://someimagesite.com/image.jpg` (string) - the image for banner
- `position`: `1` (number) - position of the announcement. currently can only be 1 (banner)
- `sort_order`: `0` (number) - when multiple announce in the same position, this is a reference order can be used to make a slide show. but currently not used.
- `start_time`: `1497574966172` (number) - a timestamp for the start time of the announce.
- `end_time`:  `1497574966172` (number) - a timestamp for the end time of the announce.

## WebHook
- `id`: `d92db89d-54f2-43aa-82d9-205aad99b96e` (string)
- `name`: `Awesome Webhook` (string) - the name of web hook, must be unique
- `description`: `A Web hook description` (string) - the description of web hook, this is plain text.
- `url`: `http://localhost:9800/` (string) - the url of web hook
- `status`: `1` (string) - the status of a web hook, can be 1 (ALIVE), 2 (HAS ERROR), 3 (DEAD), 4 (INTIAL)
- `register_time`: `1497574966172` (number) - the web hook register time (UTC +0)
- `consecutive_failure_count`: `1` (number) - indicates how many times this web hook has failed to responded event. when a max count exceeds this web hook status will be DEAD.
- `shared_secret`: `abc` (string) - a shared secret string to make signature.

## TokenFavoriteList
- `id`:`808a7d09-629f-41a3-a1bc-0924a95c5cc6` (string) - id of favorite
- `token_id`: `afb23de8d` (string) - token of a web hook
- `bangumi_id`: `46a469ee-5041-4f7c-8bf3-43ea6166a728` (string) - id of the favorite bangumi
- `status`: `3` (number) - favroite status, can be 1 (WISH), 2 (WATCHED), 3 (WATCHING), 4 (PAUSE), 5 (ABANDONED)
